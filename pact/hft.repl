(begin-tx)
(define-namespace 'kip (sig-keyset) (sig-keyset))
(load "root/fungible-v2.pact")
(load "root/coin.pact")
(load "kip/account-protocols-v1.pact")
(load "kip/manifest.pact")
(load "kip/poly-fungible-v2.pact")

(define-namespace 'util (sig-keyset) (sig-keyset))
(load "util/fungible-util.pact")

(define-namespace 'hft (sig-keyset) (sig-keyset))
(env-data
 { 'hft-admin: []
 , 'ns: "hft"
 , 'upgrade: false })
(load "policy.pact")
(commit-tx)

(begin-tx)
(load "hft.pact")
(typecheck "hft.hft")
(commit-tx)

(begin-tx)
(env-data
 { 'bob-ks: ["bob"]
 , 'alice-ks: ["alice"]
 , 'mint-ks: ["mint"]
 , 'burn-ks: ["burn"]
 , 'sale-ks: ["sale"]
 , 'transfer-ks: ["transfer"]
 })
(env-keys ["bob"])
(use hft.hft)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [
     (MINT "project-0" "bob" 5.0),
     (TRANSFER "project-0" "bob" "alice" 2.0),
     (TRANSFER "project-0" "bob" "project-0:1" 1.0),
     (TRANSFER "project-0:1" "bob" "alice"  0.000000002),
     (MINT "project-0:1" "bob" 1.0)
    ]
  },
  {
    'key: "project-0:1",
    'caps: [
     (MINT "project-0:1" "bob" 1.0)
    ]
  },
  {
    'key: "alice",
    'caps: [
      (TRANSFER "project-0:1" "alice" "project-0:1:1" 1.0)
      (MINT "project-0" "alice" 5.0)
    ]
  },
  { 'key: "mint", 'caps: [] },
  { 'key: "transfer", 'caps: [] }
  ])

(hft.guard-token-policy.init-guards
  "project-0"
  (read-keyset 'mint-ks )
  (read-keyset 'burn-ks )
  (read-keyset 'sale-ks)
  (read-keyset 'transfer-ks))

(use kip.token-manifest)

(expect
  "bob creates a new token project-0"
  "Write succeeded"
  (create-token
    "project-0"
    12
    (create-manifest (uri "text" "project-0-uri") [])
    hft.guard-token-policy)
  )

(expect-failure
  "bob creates a new token project-1 before initialization"
  "read: row not found: project-1"
  (create-token
    "project-1"
    12
    (create-manifest (uri "text" "project-0-uri") [])
    hft.guard-token-policy)
  )

(expect-failure
  "bob creates a new token project-1 before initialization"
  "Manifest is not valid"
  (create-token
    "project-0"
    12
    {"uri": (uri "text" "project-0-uri"),
     "hash": "wrong-hash",
     "data": []}
    hft.guard-token-policy)
  )

(expect
  "bob mints a 5.0 of token"
  "Write succeeded"
  (mint "project-0" "bob" (read-keyset 'bob-ks) 5.0))

(expect
  "total supply of project-0"
  5.0
  (total-supply "project-0"))

(expect "MINT events"
   [{"name": "hft.hft.CREATE_TOKEN","params": ["project-0"]}
   {"name": "hft.hft.MINT","params": ["project-0" "bob" 5.0]}
   {"name": "hft.hft.SUPPLY","params": ["project-0" 5.0]} ]
  (map (remove 'module-hash) (env-events true)))

;;regular transfer
(expect "Bob transfers 2.0 to Alice"
  "Write succeeded"
  (transfer-create "project-0" "bob" "alice" (read-keyset 'alice-ks) 2.0))

(expect "TRANSFER event"
   [{"name": "hft.hft.TRANSFER","params": ["project-0" "bob" "alice" 2.0]}
   ]
  (map (remove 'module-hash) (env-events true)))

(commit-tx)

(begin-tx)
(use hft.hft)

(env-sigs [
  {
    'key: "alice",
    'caps: [
      (TRANSFER "project-0:1" "alice" "project-0:1:1" 1.0)
      (MINT "project-0" "alice" 5.0)
    ]
  }
  ])

(expect-failure
  "alice can't mint a project-0 token"
  "[mint]"
  (mint "project-0" "alice" (read-keyset 'alice-ks) 5.0))

(rollback-tx)

;;
;; BURN TODO
;;



;; ======================================================
;; test chainweb single-key naming protocol
;; ======================================================

(begin-tx)
(env-data
  {'k: ["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]
  ,'k2:
   {'keys:["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]
   ,'pred:"keys-any"}
  ,'k3:
   {'keys:["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4", "5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"]
   ,'pred:"keys-all"}
  })

(env-sigs
  [{'key:'bob
   ,'caps:
    [(hft.hft.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
      0.04),
    (hft.hft.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.02),
    (hft.hft.TRANSFER 'project-0 'bob
      "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.04)
      ]}
  ,{'key:'transfer,'caps:[]}
])

(length "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3")
(expect-failure
  "single-key mismatch, create-account"
  "Single-key account protocol violation"
  (hft.hft.create-account 'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)))

(expect-failure
  "single-key mismatch, transfer-create"
  "Single-key account protocol violation"
  (hft.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)
    0.02))

(expect-failure
  "single-key mismatch, transfer-create"
  "Single-key account protocol violation"
  (hft.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k2 )
    0.02))

(expect-failure
  "multi-key, transfer-create"
  "Single-key account protocol violation"
  (hft.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k3 )
    0.02))

(expect-failure
  "bad protocol, transfer-create"
  "Unrecognized reserved protocol: c"
  (hft.hft.transfer-create
    'project-0
    'bob
    "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k2)
    0.04))

(expect-failure
  "bad protocol, create-account"
  "Unrecognized reserved protocol: c"
  (hft.hft.create-account 'project-0
    "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k2)))

(expect-failure
  "single-key mismatch, create-account"
  "Single-key account protocol violation"
  (hft.hft.create-account
    'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)))

(expect
  "single-key success, create-account"
  "Write succeeded"
  (hft.hft.create-account 'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k)))

(rollback-tx)

(begin-tx)

(env-data
  {'k: ["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]})
(env-sigs
  [{'key:'bob
   ,'caps:
    [(hft.hft.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.02)]}
  ,{'key:'transfer,'caps: []}
  ])

(expect
  "single-key success, transfer-create"
  "Write succeeded"
  (hft.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k)
    0.02))

(expect "TRANSFER events"
  [{
  "name": "hft.hft.TRANSFER",
  "params": ["project-0", "bob", "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4", 0.02]
  }]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx)

;; Test ACCESSORS

(use hft.hft)
(use kip.token-manifest)

(env-data
 { 'bob-ks: ["bob"],
   'alice-ks: ["alice"]
 })

(expect "Returns key"
  "project-0:bob"
  (key 'project-0 'bob))

(expect "Returns manifest"
  (create-manifest (uri "text" "project-0-uri") [])
  (get-manifest 'project-0))

(expect "Returns tokens"
  ['project-0]
  (get-tokens))

(expect "Returns project-0 token"
  { 'id: "project-0"
  , 'manifest: (create-manifest (uri "text" "project-0-uri") [])
  , 'policy: hft.guard-token-policy
  , 'precision: 12
  , 'supply: 5.0
  }
  (get-token "project-0"))

(expect "Returns ledger keys"
  [ "project-0:alice"
    "project-0:bob" ]
  (get-ledger-keys))

(expect "get ledger entry"
  { 'account: "bob"
  , 'balance: 3.0
  , 'guard: (read-keyset 'bob-ks)
  , 'id: "project-0"
  }
  (get-ledger-entry (key 'project-0 'bob)))

(expect "get ledger"
 [
  { 'account: "alice"
  , 'balance: 2.0
  , 'guard: (read-keyset 'alice-ks)
  , 'id: "project-0"
  }
  { 'account: "bob"
  , 'balance: 3.0
  , 'guard: (read-keyset 'bob-ks)
  , 'id: "project-0"
  }]
 (get-ledger))

(rollback-tx)

;;sales policy
(begin-tx)
(env-hash (hash "sale-tx1"))
(use hft.hft)
(env-chain-data {"block-height": 100})
(env-sigs
  [{'key:'bob
   ,'caps:
    [(hft.hft.OFFER "project-0" "bob" 0.1 110)
     (hft.hft.OFFER "project-0" "bob" 0.1 10)
     ]}
  ,{'key:'sale,'caps: [
    (hft.hft.OFFER "project-0" "bob" 0.1 110)
    (hft.hft.OFFER "project-0" "bob" 0.1 10)
    (hft.hft.BUY "project-0" "bob" "buyer" 0.1 110 (hash "sale-tx1"))
    ]}
  ])

(env-data
 { 'buyer: "buyer",
   'buyer-guard: {"keys": ["buyer"], "pred": "="}
 })

(expect-failure "Offer fails due to small timeout"
  "invalid timeout"
  (sale 'project-0 'bob 0.1 10))

(expect "Offer succeeds"
  true
  (sale 'project-0 'bob 0.1 110))

(expect "Buy succeeds"
  true
  (continue-pact 1))

(expect "SALE events"
  [{"name": "hft.hft.OFFER","params": ["project-0" "bob" 0.1 110]}
   {"name": "hft.hft.SALE","params": ["project-0" "bob" 0.1 110 (hash "sale-tx1")]}
   {"name": "hft.hft.TRANSFER","params": ["project-0" "bob" (sale-account) 0.1]}
   {"name": "hft.hft.BUY","params": ["project-0" "bob" "buyer" 0.1 110 (hash "sale-tx1")]}
   {"name": "hft.hft.TRANSFER","params": ["project-0" (sale-account) "buyer" 0.1]}]
  (map (remove 'module-hash) (env-events true)))


(rollback-tx)

(begin-tx)
(env-hash (hash "sale-tx2"))
(env-chain-data {"block-height": 100})
(use hft.hft)
(env-sigs
  [{'key:'bob
   ,'caps:
    [(hft.hft.OFFER "project-0" "bob" 0.1 110)
     ]}
  ,{'key:'sale,'caps: [
    (hft.hft.OFFER "project-0" "bob" 0.1 110)
    (hft.hft.BUY "project-0" "bob" "buyer" 0.1 110 (hash "sale-tx2"))
    ]}
  ])

(env-data
 { 'buyer: "buyer",
   'buyer-guard: {"keys": ["buyer"], "pred": "="}
 })

(expect "Offer succeeds"
  true
  (sale 'project-0 'bob 0.1 110))

(env-chain-data {"block-height": 111})

(expect-failure "Buy fails after timeout"
  "expired"
  (continue-pact 1))

(expect "Withdraw succeeds after timeout"
  true
  (continue-pact 0 true))

(expect "SALE events"
  [{"name": "hft.hft.OFFER","params": ["project-0" "bob" 0.1 110]}
  {"name": "hft.hft.SALE","params": ["project-0" "bob" 0.1 110 (hash "sale-tx2")]}
  {"name": "hft.hft.TRANSFER","params": ["project-0" "bob" (sale-account) 0.1]}
  {"name": "hft.hft.WITHDRAW","params": ["project-0" "bob" 0.1 110 (hash "sale-tx2")]}
  {"name": "hft.hft.TRANSFER","params": ["project-0" (sale-account) "bob" 0.1]}]
  (map (remove 'module-hash) (env-events true)))

(rollback-tx)

(begin-tx)
(env-hash (hash "sale-tx3"))
(env-data {
   "ns": "hft"
  ,'mint-guard: {"keys": ["mint"], "pred": "="}
  ,'bob-guard: {"keys": ["bob"], "pred": "="}
  })
(env-sigs
  [{'key:'mint
   ,'caps:
    [(hft.hft.MINT "project-2" "bob" 1.0)
     ]}])
(load "fixed-quote-policy.pact")
(use kip.token-manifest)
(use hft.hft)

(expect "initiates project-2 with fixed quote policy"
  "Write succeeded"
  (init-fqp "project-2" (read-keyset 'mint-guard) 10.0 1.0))

(expect "Create token project-2"
  "Write succeeded"
  (create-token "project-2" 1
    (create-manifest (uri "text" "project-2-uri") []) hft.fixed-quote-policy))

(expect "bob mints project-2"
  "Write succeeded"
  (mint 'project-2 "bob" (read-keyset 'bob-guard) 1.0))

(commit-tx)

(begin-tx)
(use hft.hft)
(env-sigs
  [{'key:'bob
   ,'caps:
    [(hft.hft.OFFER "project-2" "bob" 0.2 120)
     ]}])
(env-data
  {
   "quote": {
       "fungible": coin
      ,"price": 1.0
      ,"recipient": "alice"
      ,"recipient-guard": {"keys": ["alice"], "pred":"="}
    }
  ,"buyer": "buyer"
  ,"buyer-guard": {"keys": ["buyer"], "pred": "="}
  })

(env-chain-data {"block-height": 100})

(expect "Sale succeeds"
  true
  (sale 'project-2 'bob 0.2 120))

(rollback-tx)
