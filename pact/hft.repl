(begin-tx)
(env-data
 { 'ns-admin-keyset: ["admin"]
 , 'ns-operate-keyset: ["operate"]
 , 'ns-genesis-keyset: { "keys": [], "pred": "="}
 , 'util-ns-admin: []
 , 'hft-admin: []
 , 'ns: "user"
 , 'upgrade: false })
(load "root/fungible-v2.pact")
(load "root/ns.pact")
(load "account-protocols-v1.pact")
(load "fungible-util.pact")
(load "policy.pact")
(load "manifest.pact")
(commit-tx)

(begin-tx)
(load "hft.pact")
(verify "user.hft")
(commit-tx)

(begin-tx)
(env-data
 { 'bob-ks: ["bob"],
   'alice-ks: ["alice"]
 })
(env-keys ["bob"])
(use user.hft)

(env-sigs [
  { 'key: "bob"
  , 'caps:
    [
     (MINT "project-0" "bob" 5.0),
     (TRANSFER "project-0" "bob" "alice" 2.0),
     (TRANSFER "project-0" "bob" "project-0:1" 1.0),
     (TRANSFER "project-0:1" "bob" "alice"  0.000000002),
     (MINT "project-0:1" "bob" 1.0)
    ]
  },
  {
    'key: "project-0:1",
    'caps: [
     (MINT "project-0:1" "bob" 1.0)
    ]
  },
  {
    'key: "alice",
    'caps: [
      (TRANSFER "project-0:1" "alice" "project-0:1:1" 1.0)
      (MINT "project-0" "alice" 5.0)
    ]
  }
  ])

(user.guard-token-policy.init-guards
  "project-0" (read-keyset 'bob-ks ) (read-keyset 'bob-ks ))

(use user.token-manifest)

(expect
  "bob creates a new token project-0"
  "Write succeeded"
  (create-token
    "project-0"
    12
    (create-manifest (uri "text" "project-0-uri") [])
    user.guard-token-policy)
  )

(expect-failure
  "bob creates a new token project-1 before initialization"
  "Token policy is not initialized"
  (create-token
    "project-1"
    12
    (create-manifest (uri "text" "project-0-uri") [])
    user.guard-token-policy)
  )

(expect-failure
  "bob creates a new token project-1 before initialization"
  "Manifest is not valid"
  (create-token
    "project-0"
    12
    {"uri": (uri "text" "project-0-uri"),
     "hash": "wrong-hash",
     "data": []}
    user.guard-token-policy)
  )

(expect
  "bob mints a 5.0 of token"
  "Write succeeded"
  (mint "project-0" "bob" (read-keyset 'bob-ks) 5.0))

(expect
  "total supply of project-0"
  5.0
  (total-supply "project-0"))

(expect-failure
  "alice can't mint a project-0 token"
  (mint "project-0" "alice" (read-keyset 'alice-ks) 5.0))

;;regular transfer
(expect "Bob transfers 2.0 to Alice"
  "Write succeeded"
  (transfer-create "project-0" "bob" "alice" (read-keyset 'alice-ks) 2.0))

(commit-tx)


;; ======================================================
;; test chainweb single-key naming protocol
;; ======================================================

(begin-tx)
(env-data
  {'k: ["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]
  ,'k2:
   {'keys:["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]
   ,'pred:"keys-any"}
  ,'k3:
   {'keys:["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4", "5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"]
   ,'pred:"keys-all"}
  })
(env-sigs
  [{'key:'bob
   ,'caps:
    [(user.hft.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
      0.04),
    (user.hft.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.02)
      ]}])

(length "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3")
(expect-failure
  "single-key mismatch, create-account"
  "Single-key account protocol violation"
  (user.hft.create-account 'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)))

(expect-failure
  "single-key mismatch, transfer-create"
  "Single-key account protocol violation"
  (user.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)
    0.02))

(expect-failure
  "single-key mismatch, transfer-create"
  "Single-key account protocol violation"
  (user.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k2 )
    0.02))

(expect-failure
  "multi-key, transfer-create"
  "Single-key account protocol violation"
  (user.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k3 )
    0.02))

(expect-failure
  "bad protocol, create-account"
  "Unrecognized reserved protocol: c"
  (user.hft.create-account 'project-0
    "c:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k2)))

(expect-failure
  "single-key mismatch, create-account"
  "Single-key account protocol violation"
  (user.hft.create-account
    'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f3"
    (read-keyset 'k)))

(expect
  "single-key success, create-account"
  "Write succeeded"
  (user.hft.create-account 'project-0
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k)))

(rollback-tx)

(begin-tx)

(env-data
  {'k: ["5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"]})
(env-sigs
  [{'key:'bob
   ,'caps:
    [(user.hft.TRANSFER 'project-0 'bob
      "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
      0.02)]}])

(expect
  "single-key success, transfer-create"
  "Write succeeded"
  (user.hft.transfer-create
    'project-0
    'bob
    "k:5b4c9fc5207fcf700a5fbcb48c261820149c8ecd52e005282ed9e3f5febcd1f4"
    (read-keyset 'k)
    0.02))
(rollback-tx)

(begin-tx)
(use user.hft)
(view-tokens)
(view-ledger)
(commit-tx)
