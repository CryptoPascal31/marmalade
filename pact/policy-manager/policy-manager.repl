(load "../marmalade.repl")

(typecheck "marmalade-v2.policy-manager")



(begin-tx "upgrade policy and check if stored policy matches with saved concrete policy")
  (env-sigs [
    { 'key: 'marmalade-admin
     ,'caps: []
   }])
   (use marmalade-v2.ledger)
   (use marmalade-v2.util-v1)

  (env-data {
    'ns: "marmalade-v2"
   ,'token-id: (create-token-id { 'uri: "test-uri-3", 'precision: 0, 'policies: (create-policies DEFAULT)  } )
    })
    (namespace (read-msg 'ns))

    (expect  "create a token "
      true
      (create-token (read-msg 'token-id ) 0 "test-uri-3"  (create-policies DEFAULT)  ))

    (module non-fungible-policy-v1 GOVERNANCE

      @doc "Concrete policy for issuing an nft with a fixed supply of 1"

      (defcap GOVERNANCE ()
        (enforce-guard (keyset-ref-guard 'marmalade-admin )))

      (implements kip.token-policy-v2)
      (use kip.token-policy-v2 [token-info])

      (defun enforce-ledger:bool ()
         (enforce-guard (marmalade-v2.ledger.ledger-guard))
      )

      (defun enforce-init:bool
        ( token:object{token-info}
        )
        (enforce-ledger)
        true
      )

      (defun enforce-mint:bool
        ( token:object{token-info}
          account:string
          guard:guard
          amount:decimal
        )
        (enforce-ledger)
      )

      (defun enforce-burn:bool
        ( token:object{token-info}
          account:string
          amount:decimal
        )
        (enforce-ledger)
      )

      (defun enforce-offer:bool
        ( token:object{token-info}
          seller:string
          amount:decimal
          sale-id:string
        )
        @doc "Capture quote spec for SALE of TOKEN from message"
        (enforce-ledger)
      )

      (defun enforce-buy:bool
        ( token:object{token-info}
          seller:string
          buyer:string
          buyer-guard:guard
          amount:decimal
          sale-id:string )
        (enforce-ledger)
      )

      (defun enforce-transfer:bool
        ( token:object{token-info}
          sender:string
          guard:guard
          receiver:string
          amount:decimal )
        (enforce-ledger)
      )

      (defun enforce-withdraw:bool
        ( token:object{token-info}
          seller:string
          amount:decimal
          sale-id:string )
        (enforce-ledger)
      )
    )

  (use marmalade-v2.policy-manager)
  (use marmalade-v2.policy-manager [NON_FUNGIBLE_POLICY])

  (expect "upgrade non-fungible-policy"
    true
    (write-concrete-policy NON_FUNGIBLE_POLICY marmalade-v2.non-fungible-policy-v1))

  (expect "check if stored policy matches with saved concrete-policy"
    true
    (contains
      (get-concrete-policy NON_FUNGIBLE_POLICY)
      (at 'policies (get-token-info (read-msg 'token-id )))) )

(rollback-tx)

(begin-tx "Test enforce-init")

  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-hash (hash "offer-1"))
  (env-chain-data {"chain-id": "0"})

  (env-data {
    "mint-guard": {"keys": ["mint"], "pred": "keys-all"}
    })

  (expect-failure "enforce-init cannot be called directly"
    "Capability not acquired"
    (enforce-init {
      "id": (create-token-id { 'uri: "default-test-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } )
     ,"supply": 0.0
     ,"precision": 0
     ,"uri": "default-test-uri"
     ,"policies": (create-policies DEFAULT) })
  )

  (expect "create a token with token-id that satisfies t: protocol"
    true
    (create-token
      (create-token-id { 'uri: "default-test-uri", 'precision: 0, 'policies: (create-policies DEFAULT) } )
       0 "default-test-uri" (create-policies DEFAULT)))

  (expect "create-token events"
     [ {"name": "marmalade-v2.guard-policy-v1.GUARDS","params": [{"burn-guard": marmalade-v2.guard-policy-v1.GUARD_SUCCESS,"mint-guard": marmalade-v2.guard-policy-v1.GUARD_SUCCESS,"sale-guard": marmalade-v2.guard-policy-v1.GUARD_SUCCESS,"transfer-guard": marmalade-v2.guard-policy-v1.GUARD_SUCCESS}]}
       {"name": "marmalade-v2.ledger.TOKEN","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" 0 0.0 [marmalade-v2.non-fungible-policy-v1 marmalade-v2.guard-policy-v1] "default-test-uri"]}
     ]
     (map (remove "module-hash")  (env-events true))
  )

(commit-tx)

(begin-tx "Test enforce-mint")

  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-data {
     "token-id": "t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0"
    , "account": "k:account"
    , "account-guard": {"keys": ["account"], "pred": "keys-all"}
    })

(env-sigs [
  { 'key: 'mint
   ,'caps: [(marmalade-v2.ledger.MINT (read-msg "token-id") "k:account" 1.0)
            (marmalade-v2.guard-policy-v1.MINT (read-string "token-id") "k:account" 1.0)
   ]
   }])

   (expect-failure "enforce-mint cannot be called directly"
     "Capability not acquired"
     (enforce-mint (get-token-info "t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0") (read-string 'account) (read-keyset 'account-guard ) 1.0)
   )

  (expect "mint a default token through ledger.mint"
    true
    (mint (read-string 'token-id )  (read-string 'account ) (read-keyset 'account-guard ) 1.0))

  (expect "mint events"
    [ {"name": "marmalade-v2.ledger.MINT","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:account" 1.0]}
      {"name": "marmalade-v2.ledger.ACCOUNT_GUARD","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:account" (read-keyset 'account-guard)]}
      {"name": "marmalade-v2.ledger.RECONCILE","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" 1.0 {"account": "","current": 0.0,"previous": 0.0} {"account": "k:account","current": 1.0,"previous": 0.0}]} {"name": "marmalade-v2.ledger.SUPPLY","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" 1.0]}
    ]
   (map (remove "module-hash")  (env-events true))
  )

(commit-tx)

(begin-tx "Test enforce-burn")
;;TODO
(rollback-tx)

(begin-tx "Test enforce-offer without quote")
  (env-hash (hash "enforce-offer-0"))
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-data {
      "seller-fungible-account": "k:seller-fungible-account"
    , "seller-fungible-guard": {"keys": ["seller-fungible-account"], "pred": "keys-all"}
    })

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})

  (env-data {
      "token-id": "t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0"
     ,"seller": "k:account"
  })

  (env-sigs [
    { 'key: 'account
    ,'caps: [
      (marmalade-v2.ledger.OFFER (read-string 'token-id) "k:account" 1.0 (util.to-timestamp (time "2023-07-22T11:26:35Z")))]
    }])

  (expect-failure "enforce-offer cannot be called directly"
    "Capability not acquired"
    (enforce-offer (get-token-info (read-string "token-id")) (read-string 'seller) 1.0 "void-sale-id")
  )

  (expect "start offer by running step 0 of sale"
    (pact-id)
    (sale (read-msg 'token-id) "k:account" 1.0 (util.to-timestamp (time "2023-07-22T11:26:35Z"))))

(expect "offer events"
    [ {"name": "marmalade-v2.ledger.OFFER","params": [(read-string "token-id") "k:account" 1.0 1690025195.0]}
      {"name": "marmalade-v2.ledger.SALE","params": [(read-string "token-id") "k:account" 1.0 1690025195.0 "y9iTTBsSq56yIgmJexCyOX3DSFVe0CwQs4K0jISRAdM"]}
      {"name": "marmalade-v2.ledger.ACCOUNT_GUARD","params": [(read-string "token-id") "c:cNEu9OPDCB7tmnj-Z2cMxrRNbJAeGl_r3aO-L367oSs" (create-capability-pact-guard (SALE_PRIVATE (pact-id)))]}
      {"name": "marmalade-v2.ledger.TRANSFER","params": [(read-string "token-id") "k:account" "c:cNEu9OPDCB7tmnj-Z2cMxrRNbJAeGl_r3aO-L367oSs" 1.0]}
      {"name": "marmalade-v2.ledger.RECONCILE","params": [(read-string "token-id") 1.0 {"account": "k:account","current": 0.0,"previous": 1.0} {"account": "c:cNEu9OPDCB7tmnj-Z2cMxrRNbJAeGl_r3aO-L367oSs","current": 1.0,"previous": 0.0}]}]
    (map (remove "module-hash")  (env-events true))
  )

  (env-chain-data {"block-time": (time "2023-07-21T11:26:35Z")})

  (env-sigs
    [ {'key:'buyer
      ,'caps: [
        (marmalade-v2.ledger.BUY "t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:account" "k:buyer" 1.0 (util.to-timestamp (time "2023-07-22T11:26:35Z")) (pact-id))
      ]}
  ])

  (env-data {
    "buyer": "k:buyer"
   ,"buyer-guard": {"keys": ['buyer], "pred": "keys-all"}
   })

  (expect "Buy succeeds"
    (pact-id)
    (continue-pact 1))

  (expect "buy events"
   [ {"name": "marmalade-v2.ledger.BUY","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:account" "k:buyer" 1.0 1690025195.0 "y9iTTBsSq56yIgmJexCyOX3DSFVe0CwQs4K0jISRAdM"]}
     {"name": "marmalade-v2.ledger.ACCOUNT_GUARD","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:buyer" (read-keyset 'buyer-guard)]}
     {"name": "marmalade-v2.ledger.TRANSFER","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "c:cNEu9OPDCB7tmnj-Z2cMxrRNbJAeGl_r3aO-L367oSs" "k:buyer" 1.0]}
     {"name": "marmalade-v2.ledger.RECONCILE","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" 1.0 {"account": "c:cNEu9OPDCB7tmnj-Z2cMxrRNbJAeGl_r3aO-L367oSs","current": 0.0,"previous": 1.0} {"account": "k:buyer","current": 1.0,"previous": 0.0}]}]
    (map (remove "module-hash")  (env-events true))
  )
  ;; Test Withdraw

(rollback-tx)

(begin-tx "Create buyer and market fungible account, fund buyer account")

  (env-data {
    "buyer-guard": {"keys": ["buyer-fungible"], "pred": "keys-all"}
   ,"market-guard": {"keys": ["market-fungible"], "pred": "keys-all"}
   })

  (marmalade-v2.abc.create-account "k:buyer-fungible" (read-keyset 'buyer-guard))
  (marmalade-v2.abc.create-account "k:market-fungible" (read-keyset 'market-guard))
  (marmalade-v2.abc.fund "k:buyer-fungible" 2.0)
(commit-tx)

(begin-tx "Test enforce-offer with quote")

  (env-hash (hash "enforce-offer-1"))
  (use marmalade-v2.ledger)
  (use marmalade-v2.policy-manager)
  (use marmalade-v2.util-v1)

  (env-data {
      "seller-fungible-account": "k:seller-fungible-account"
    , "seller-fungible-guard": {"keys": ["seller-fungible-account"], "pred": "keys-all"}
    })

  (marmalade-v2.abc.create-account (read-string "seller-fungible-account") (read-keyset 'seller-fungible-guard))

  (env-chain-data {"block-time": (time "2023-07-20T11:26:35Z")})

  (env-data {
      "token-id": "t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0"
     ,"seller": "k:account"
     ,"quote":{
        "spec": {
          "fungible": marmalade-v2.abc
          ,"price": 2.0
          ,"amount": 1.0
          ,"seller-fungible-account": {
              "account": "k:seller-fungible-account"
             ,"guard": {"keys": ["seller-fungible-account"], "pred": "keys-all"}
            }
        }
        ,"seller-guard": {"keys": ["account"], "pred": "keys-all"}
        ,"quote-guards": []
      }
    }
  )

  (env-sigs [
    { 'key: 'account
    ,'caps: [
      (marmalade-v2.ledger.OFFER (read-string 'token-id) "k:account" 1.0 (util.to-timestamp (time "2023-07-22T11:26:35Z")))]
    }])

  (expect "start offer with quote spec"
    (pact-id)
    (sale (read-msg 'token-id) "k:account" 1.0 (util.to-timestamp (time "2023-07-22T11:26:35Z"))))

(expect "offer events"
    [ {"name": "marmalade-v2.quote-manager.QUOTE","params": [(pact-id) (read-string 'token-id) (at 'spec (read-msg 'quote )) ]}
      {"name": "marmalade-v2.quote-manager.QUOTE_GUARDS","params": [(pact-id) (read-string 'token-id) (at 'seller-guard (read-msg 'quote )) []]}
      {"name": "marmalade-v2.ledger.OFFER","params": [(read-string 'token-id) "k:account" 1.0 1690025195.0]}
      {"name": "marmalade-v2.ledger.SALE","params": [(read-string 'token-id) "k:account" 1.0 1690025195.0 (pact-id)]}
      {"name": "marmalade-v2.ledger.ACCOUNT_GUARD","params": [(read-string 'token-id) "c:JKwZqh1BLwRitGKgaousFt5ZgWOSyY0tyPh_xh25a2Q" (create-capability-pact-guard (SALE_PRIVATE (pact-id)))]}
      {"name": "marmalade-v2.ledger.TRANSFER","params": [(read-string 'token-id) "k:account" "c:JKwZqh1BLwRitGKgaousFt5ZgWOSyY0tyPh_xh25a2Q" 1.0]}
      {"name": "marmalade-v2.ledger.RECONCILE","params": [(read-string 'token-id) 1.0 {"account": "k:account","current": 0.0,"previous": 1.0} {"account": "c:JKwZqh1BLwRitGKgaousFt5ZgWOSyY0tyPh_xh25a2Q","current": 1.0,"previous": 0.0}]}
    ]
    (map (remove "module-hash")  (env-events true))
  )

  (env-chain-data {"block-time": (time "2023-07-21T11:26:35Z")})

  (env-sigs
    [{'key:'buyer-fungible
      ,'caps: [
        (marmalade-v2.abc.TRANSFER "k:buyer-fungible" "c:OgWllLAYtF0-YHB7by8ZdFfYg_DvDLoQNfFD4gXdzdw" 2.0)
      ]}
    {'key:'buyer
      ,'caps: [
        (marmalade-v2.ledger.BUY "t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:account" "k:buyer" 1.0 (util.to-timestamp (time "2023-07-22T11:26:35Z")) (pact-id))
      ]}
  ])

  (env-data {
    "buyer": "k:buyer"
   ,"buyer-guard": {"keys": ['buyer], "pred": "keys-all"}
   ,"buyer_fungible_account": "k:buyer-fungible"
   })

  (expect "Buy succeeds"
    (pact-id)
    (continue-pact 1))

  (expect "buy events"
    [ {"name": "marmalade-v2.abc.TRANSFER","params": ["k:buyer-fungible" "c:OgWllLAYtF0-YHB7by8ZdFfYg_DvDLoQNfFD4gXdzdw" 2.0]}
      {"name": "marmalade-v2.abc.TRANSFER","params": ["c:OgWllLAYtF0-YHB7by8ZdFfYg_DvDLoQNfFD4gXdzdw" "k:seller-fungible-account" 2.0]}
      {"name": "marmalade-v2.ledger.BUY","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:account" "k:buyer" 1.0 1690025195.0 "i35txr8Kcr43a3gQm7Zbd98mqQwfqpd2DkdsbKeA0qY"]}
      {"name": "marmalade-v2.ledger.ACCOUNT_GUARD","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "k:buyer" (read-keyset 'buyer-guard)]}
      {"name": "marmalade-v2.ledger.TRANSFER","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" "c:JKwZqh1BLwRitGKgaousFt5ZgWOSyY0tyPh_xh25a2Q" "k:buyer" 1.0]}
      {"name": "marmalade-v2.ledger.RECONCILE","params": ["t:TskmY_6Uz3M5PuVNd0Ej50cQS7TjvkRdGsGmjHsv6Y0" 1.0 {"account": "c:JKwZqh1BLwRitGKgaousFt5ZgWOSyY0tyPh_xh25a2Q","current": 0.0,"previous": 1.0} {"account": "k:buyer","current": 1.0,"previous": 0.0}]}]
    (map (remove "module-hash")  (env-events true))
  )

;;TODO  Test withdraw
(rollback-tx)
; ; (begin-tx "load regular policies")
; ;   (load "./policies/fixed-issuance-policy/fixed-issuance-policy-v1.pact")
; ;   (load "./policies/onchain-manifest-policy/onchain-manifest-policy-v1.pact")
; ; (commit-tx)
